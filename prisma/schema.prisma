// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Admin
  User
  Moderator
}

enum UserStatus {
  Active
  Inactive
  Suspended
  PendingVerification
}

enum PaymentStatus {
  RequiresPaymentMethod
  RequiresConfirmation
  RequiresAction
  Processing
  RequiresCapture
  Canceled
  Succeeded
}

enum SubscriptionStatus {
  Active
  PastDue
  Unpaid
  Canceled
  Incomplete
  IncompleteExpired
  Trialing
  Paused
}

model User {
  id               String     @id @default(cuid())
  email            String     @unique
  firstName        String     @map("first_name")
  lastName         String     @map("last_name")
  passwordHash     String     @map("password_hash")
  role             UserRole   @default(User)
  status           UserStatus @default(PendingVerification)
  emailVerified    Boolean    @default(false) @map("email_verified")
  phone            String?
  avatarUrl        String?    @map("avatar_url")
  lastLogin        DateTime?  @map("last_login")
  stripeCustomerId String?    @map("stripe_customer_id")
  createdAt        DateTime   @default(now()) @map("created_at")
  updatedAt        DateTime   @updatedAt @map("updated_at")
  deletedAt        DateTime?  @map("deleted_at")

  // Relations
  payments      Payment[]
  subscriptions Subscription[]

  @@map("users")
}

model Payment {
  id                    String        @id @default(cuid())
  stripePaymentIntentId String        @unique @map("stripe_payment_intent_id")
  userId                String        @map("user_id")
  stripeCustomerId      String        @map("stripe_customer_id")
  amount                Int           // Amount in cents
  currency              String        @default("usd")
  status                PaymentStatus
  paymentMethod         String?       @map("payment_method")
  description           String?
  metadata              Json?
  processedAt           DateTime?     @map("processed_at")
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @updatedAt @map("updated_at")
  deletedAt             DateTime?     @map("deleted_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Subscription {
  id                  String             @id @default(cuid())
  stripeSubscriptionId String            @unique @map("stripe_subscription_id")
  userId              String             @map("user_id")
  stripeCustomerId    String             @map("stripe_customer_id")
  productId           String             @map("product_id")
  priceId             String             @map("price_id")
  status              SubscriptionStatus
  currentPeriodStart  DateTime           @map("current_period_start")
  currentPeriodEnd    DateTime           @map("current_period_end")
  trialStart          DateTime?          @map("trial_start")
  trialEnd            DateTime?          @map("trial_end")
  cancelAtPeriodEnd   Boolean            @default(false) @map("cancel_at_period_end")
  canceledAt          DateTime?          @map("canceled_at")
  quantity            Int                @default(1)
  metadata            Json?
  createdAt           DateTime           @default(now()) @map("created_at")
  updatedAt           DateTime           @updatedAt @map("updated_at")
  deletedAt           DateTime?          @map("deleted_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model WebhookEvent {
  id              String    @id @default(cuid())
  stripeEventId   String    @unique @map("stripe_event_id")
  eventType       String    @map("event_type")
  processed       Boolean   @default(false)
  processedAt     DateTime? @map("processed_at")
  payload         Json
  processingError String?   @map("processing_error")
  retryCount      Int       @default(0) @map("retry_count")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  deletedAt       DateTime? @map("deleted_at")

  @@map("webhook_events")
}
